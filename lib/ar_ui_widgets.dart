// lib/ar_ui_widgets.dart - Îã®ÏàúÌôîÎêú ÌöåÏ†Ñ Í∏∞Îä•
import 'package:flutter/material.dart';
import 'furniture_data.dart';
import 'furniture_selector_widget.dart';
import 'simplified_node_manager.dart';

// AR Î°úÎî© ÌôîÎ©¥
class ARLoadingScreen extends StatelessWidget {
  final String message;

  const ARLoadingScreen({super.key, required this.message});

  @override
  Widget build(BuildContext context) {
    return Container(
      color: Colors.black54,
      child: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const CircularProgressIndicator(color: Colors.white),
            const SizedBox(height: 16),
            Text(
              message,
              style: const TextStyle(color: Colors.white, fontSize: 16),
            ),
          ],
        ),
      ),
    );
  }
}

// ÏÉÅÎã® Í∞ÄÍµ¨ ÏÑ†ÌÉùÍ∏∞ Ïò§Î≤ÑÎ†àÏù¥
class ARFurnitureSelectorOverlay extends StatelessWidget {
  final FurnitureItem? selectedFurniture;
  final Function(FurnitureItem) onFurnitureSelected;

  const ARFurnitureSelectorOverlay({
    super.key,
    required this.selectedFurniture,
    required this.onFurnitureSelected,
  });

  @override
  Widget build(BuildContext context) {
    return Positioned(
      top: 0,
      left: 0,
      right: 0,
      child: SafeArea(
        child: FurnitureSelectorWidget(
          selectedFurniture: selectedFurniture,
          onFurnitureSelected: onFurnitureSelected,
        ),
      ),
    );
  }
}

// ÏÇ¨Ïö©Î≤ï ÏïàÎÇ¥ (ÌöåÏ†Ñ Í∏∞Îä• Ìè¨Ìï®)
class ARUsageGuide extends StatelessWidget {
  final FurnitureItem? selectedFurniture;

  const ARUsageGuide({super.key, required this.selectedFurniture});

  @override
  Widget build(BuildContext context) {
    final bool isRotatable = selectedFurniture?.isRotatable ?? false;

    return Positioned(
      top: 200,
      left: 20,
      right: 20,
      child: Container(
        padding: const EdgeInsets.all(20),
        decoration: BoxDecoration(
          color: Colors.blue.withOpacity(0.9),
          borderRadius: BorderRadius.circular(20),
          border: Border.all(color: Colors.white.withOpacity(0.3)),
        ),
        child: Column(
          children: [
            Icon(
              selectedFurniture?.category.icon ?? Icons.touch_app,
              color: Colors.white,
              size: 36,
            ),
            const SizedBox(height: 12),
            const Text(
              'ÏãúÏûëÌïòÍ∏∞',
              style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold, fontSize: 16),
            ),
            const SizedBox(height: 6),
            Text(
              'ÏúÑÏóêÏÑú ÏõêÌïòÎäî Í∞ÄÍµ¨Î•º ÏÑ†ÌÉùÌïòÍ≥†\nÌèâÎ©¥ÏùÑ ÌÉ≠Ìï¥ÏÑú Î∞∞ÏπòÌï¥Î≥¥ÏÑ∏Ïöî!${isRotatable ? '\n\nÌöåÏ†Ñ Í∞ÄÎä•Ìïú Í∞ÄÍµ¨ÏûÖÎãàÎã§ üîÑ' : ''}',
              style: const TextStyle(color: Colors.white, fontSize: 14, height: 1.4),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }
}

// Îã®ÏàúÌôîÎêú Í≥†Ï†ï ÏúÑÏπò Ïª®Ìä∏Î°§ (ÌöåÏ†Ñ ÌååÎùºÎØ∏ÌÑ∞ Ï†úÍ±∞Îê®)
class ARSimpleBottomControls extends StatelessWidget {
  final SimplifiedNodeManager nodeManager;
  final bool isARInitialized;
  final VoidCallback onScreenshot;
  final VoidCallback onToggleMove;
  final VoidCallback onToggleScale;
  final VoidCallback onRotateClockwise;  // ÏãúÍ≥ÑÎ∞©Ìñ• ÌöåÏ†ÑÎßå
  final VoidCallback onScaleUp;
  final VoidCallback onScaleDown;
  final VoidCallback onRemoveAll;
  final VoidCallback onRemoveActive;

  const ARSimpleBottomControls({
    super.key,
    required this.nodeManager,
    required this.isARInitialized,
    required this.onScreenshot,
    required this.onToggleMove,
    required this.onToggleScale,
    required this.onRotateClockwise,  // ÌïòÎÇòÏùò ÌöåÏ†Ñ ÏΩúÎ∞±Îßå
    required this.onScaleUp,
    required this.onScaleDown,
    required this.onRemoveAll,
    required this.onRemoveActive,
  });

  @override
  Widget build(BuildContext context) {
    return Stack(
      children: [
        // Î™®ÎìúÎ≥Ñ Ïª®Ìä∏Î°§ Î≤ÑÌäºÎì§ (ÌôîÎ©¥ Ï§ëÏïô)
        if (nodeManager.hasActiveNode && isARInitialized)
          _buildModeControls(),

        // ÌïòÎã® Ïª®Ìä∏Î°§ Î∞î
        _buildBottomControlBar(),
      ],
    );
  }

  // Î™®ÎìúÎ≥Ñ Ïª®Ìä∏Î°§ Î≤ÑÌäºÎì§
  Widget _buildModeControls() {
    return Positioned(
      bottom: 200,
      left: 0,
      right: 0,
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
        children: [
          // Ïù¥Îèô Î≤ÑÌäº
          _buildControlButton(
            icon: Icons.open_with,
            isActive: nodeManager.isMoveMode,
            onPressed: onToggleMove,
            label: 'Ïù¥Îèô',
          ),

          // ÌÅ¨Í∏∞ Ï°∞Ï†à ÏòÅÏó≠
          _buildScaleControls(),

          // ÌöåÏ†Ñ ÏòÅÏó≠ - Îã®ÏàúÌôîÎê®
          if (nodeManager.canActiveNodeRotate)
            _buildControlButton(
              icon: Icons.rotate_right,
              isActive: false, // Ìï≠ÏÉÅ ÎπÑÌôúÏÑ± ÏÉÅÌÉúÎ°ú ÌëúÏãú (ÌÜ†Í∏Ä Î™®Îìú ÏóÜÏùå)
              onPressed: onRotateClockwise, // Î∞îÎ°ú ÌöåÏ†Ñ Ïã§Ìñâ
              label: 'ÌöåÏ†Ñ',
            ),
        ],
      ),
    );
  }

  // ÌÅ¨Í∏∞ Ï°∞Ï†à Ïª®Ìä∏Î°§
  Widget _buildScaleControls() {
    return Column(
      children: [
        // ÌôïÎåÄ Î≤ÑÌäº (ÌÅ¨Í∏∞ Î™®ÎìúÏùº ÎïåÎßå)
        if (nodeManager.isScaleMode)
          _buildSmallButton(
            icon: Icons.add,
            onPressed: onScaleUp,
          ),

        if (nodeManager.isScaleMode)
          const SizedBox(height: 12),

        // ÌÅ¨Í∏∞ Î©îÏù∏ Î≤ÑÌäº
        _buildControlButton(
          icon: Icons.height,
          isActive: nodeManager.isScaleMode,
          onPressed: onToggleScale,
          label: 'ÌÅ¨Í∏∞',
        ),

        if (nodeManager.isScaleMode)
          const SizedBox(height: 12),

        // Ï∂ïÏÜå Î≤ÑÌäº (ÌÅ¨Í∏∞ Î™®ÎìúÏùº ÎïåÎßå)
        if (nodeManager.isScaleMode)
          _buildSmallButton(
            icon: Icons.remove,
            onPressed: onScaleDown,
          ),
      ],
    );
  }

  // ÌïòÎã® Ïª®Ìä∏Î°§ Î∞î
  Widget _buildBottomControlBar() {
    return Align(
      alignment: FractionalOffset.bottomCenter,
      child: SafeArea(
        child: Padding(
          padding: const EdgeInsets.only(bottom: 20.0),
          child: Container(
            padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 12),
            decoration: BoxDecoration(
              color: Colors.white.withOpacity(0.1),
              borderRadius: BorderRadius.circular(16),
              border: Border.all(
                color: Colors.white.withOpacity(0.2),
                width: 1,
              ),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.2),
                  blurRadius: 12,
                  spreadRadius: 2,
                ),
              ],
            ),
            child: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                // Ï†ÑÏ≤¥ ÏÇ≠Ï†ú Î≤ÑÌäº
                if (isARInitialized && nodeManager.totalNodes > 0)
                  _buildBottomButton(
                    icon: Icons.delete_sweep,
                    onPressed: onRemoveAll,
                    isDestructive: true,
                  ),

                if (isARInitialized && nodeManager.totalNodes > 0)
                  const SizedBox(width: 16),

                // ÏÑ†ÌÉù ÏÇ≠Ï†ú Î≤ÑÌäº
                if (nodeManager.hasActiveNode && isARInitialized)
                  _buildBottomButton(
                    icon: Icons.delete_outline,
                    onPressed: onRemoveActive,
                    isDestructive: true,
                  ),

                if (nodeManager.hasActiveNode && isARInitialized)
                  const SizedBox(width: 20),

                // Ïπ¥Î©îÎùº Î≤ÑÌäº (Î©îÏù∏)
                _buildCameraButton(),
              ],
            ),
          ),
        ),
      ),
    );
  }

  // Î©îÏù∏ Ïª®Ìä∏Î°§ Î≤ÑÌäº (ÎùºÎ≤® Ï∂îÍ∞Ä)
  Widget _buildControlButton({
    required IconData icon,
    required bool isActive,
    required VoidCallback onPressed,
    required String label,
  }) {
    return GestureDetector(
      onTap: onPressed,
      child: Column(
        children: [
          Container(
            width: 56,
            height: 56,
            decoration: BoxDecoration(
              shape: BoxShape.circle,
              color: isActive
                  ? Colors.white.withOpacity(0.3)
                  : Colors.white.withOpacity(0.1),
              border: Border.all(
                color: isActive
                    ? Colors.white.withOpacity(0.6)
                    : Colors.white.withOpacity(0.2),
                width: isActive ? 2 : 1,
              ),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.2),
                  blurRadius: 10,
                  spreadRadius: 2,
                ),
                if (isActive)
                  BoxShadow(
                    color: Colors.white.withOpacity(0.3),
                    blurRadius: 12,
                    spreadRadius: 3,
                  ),
              ],
            ),
            child: Icon(
              icon,
              color: isActive
                  ? Colors.white
                  : Colors.white.withOpacity(0.9),
              size: 24,
            ),
          ),
          const SizedBox(height: 6),
          Text(
            label,
            style: TextStyle(
              color: isActive
                  ? Colors.white
                  : Colors.white.withOpacity(0.7),
              fontSize: 10,
              fontWeight: isActive ? FontWeight.w600 : FontWeight.w400,
            ),
          ),
        ],
      ),
    );
  }

  // ÏûëÏùÄ +/- Î≤ÑÌäº
  Widget _buildSmallButton({
    required IconData icon,
    required VoidCallback onPressed,
  }) {
    return GestureDetector(
      onTap: onPressed,
      child: Container(
        width: 40,
        height: 40,
        decoration: BoxDecoration(
          shape: BoxShape.circle,
          color: Colors.white.withOpacity(0.1),
          border: Border.all(
            color: Colors.white.withOpacity(0.2),
            width: 1,
          ),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.2),
              blurRadius: 8,
              spreadRadius: 1,
            ),
          ],
        ),
        child: Icon(
          icon,
          color: Colors.white.withOpacity(0.9),
          size: 20,
        ),
      ),
    );
  }

  // ÌïòÎã® ÏùºÎ∞ò Î≤ÑÌäº
  Widget _buildBottomButton({
    required IconData icon,
    required VoidCallback onPressed,
    required bool isDestructive,
  }) {
    return GestureDetector(
      onTap: onPressed,
      child: Container(
        width: 44,
        height: 44,
        decoration: BoxDecoration(
          shape: BoxShape.circle,
          color: Colors.white.withOpacity(0.1),
          border: Border.all(
            color: Colors.white.withOpacity(0.2),
            width: 1,
          ),
        ),
        child: Icon(
          icon,
          color: isDestructive
              ? Colors.red.withOpacity(0.8)
              : Colors.white.withOpacity(0.9),
          size: 20,
        ),
      ),
    );
  }

  // Ïπ¥Î©îÎùº Î≤ÑÌäº (Î©îÏù∏)
  Widget _buildCameraButton() {
    return GestureDetector(
      onTap: onScreenshot,
      child: Container(
        width: 64,
        height: 64,
        decoration: BoxDecoration(
          shape: BoxShape.circle,
          color: Colors.white.withOpacity(0.95),
          border: Border.all(
            color: Colors.white.withOpacity(0.3),
            width: 2,
          ),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.2),
              blurRadius: 12,
              spreadRadius: 2,
            ),
          ],
        ),
        child: Stack(
          alignment: Alignment.center,
          children: [
            // ÎÇ¥Î∂Ä ÎßÅ
            Container(
              width: 48,
              height: 48,
              decoration: BoxDecoration(
                shape: BoxShape.circle,
                border: Border.all(
                  color: Colors.grey.withOpacity(0.3),
                  width: 2,
                ),
              ),
            ),
            // Ïπ¥Î©îÎùº ÏïÑÏù¥ÏΩò
            const Icon(
              Icons.camera_alt,
              size: 28,
              color: Colors.black87,
            ),
          ],
        ),
      ),
    );
  }
}